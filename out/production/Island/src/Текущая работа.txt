`кушает -> размножается -> двигается -> смерть?

04.11.2023
Создал игровое поле IslandField, но мне не нравится, что это все через статический контекст.
На первом проекте Валера меня за такое ругал)) Надо спросить, допустимо ли такое, хотя у него, если не ошибаюсь,
у самого часть сдлана через статики

Создал класс Animal и унаследовал от него хищников и веганов.
Создал в нем move()
По обезьяньи прописал в классе Animal некоторые поля и геттеры, чтобы довести логику метода до ума.
Предлагаю тебе сделать через фабрику yaml и все остальные прелести, рефактор этого счастья

1. Предлагаю в движении не делать рандомное количество шагов, ибо будет усложнять логику на мой взляд
Вместо этого мы формально соблюдаем условие потому, что раз бывают ситуации когда зверь идет за границу,
то у него "списывается" ход. Это и будет соблюдением условия "не более чем, клеток за ход"

Также тут надо будет добавить количество отнимаемой сытости за движение. Предлагаю сделать

                       отнимаемая
       кг кол ход сыт  за полный
                      цикл движения

Волк	50	30	3	8       -2
Удав	15	30	1	3       -1
Лиса	8	30	2	2       -0.5
Медведь	500	5	2	80      -20
Орел	6	20	3	1       -0.3
Лошадь	400	20	4	60      -15
Олень	300	20	4	50      -12.5
Кролик	2	150	2	0,45    -0,1
Мышь	0.05 500 1 0.01     -0.003
Коза	60	140	3	10      -3
Овца	70	140	3	15      -4
Кабан	400	50	2	50      -12.5
Буйвол	700	10	3	100     -25
Утка	1	200	4	0,15    0.04
Гусеница 0.01 1000	        -не требуется
Растения	1	200	        -не требуется


2. Уже можем потестить движение и создание карты, только нужно довести сущности до ума.

3. Предлагаю тебе написать метод eat()

4. Предлагаю чтобы я написал reproduce()


Все предложения опциональны, обсуждаемы.


07.11.2023

Сдедлал синглтон на игровом поле

Поправил метод move()

Дописал reproduce()

Исправил контруктор у травоядных и хищников


ЧТО НАДО СДЕЛАТЬ:
1. Тесты (написать класс Runner) ++
2. Насыщение ++
3.`Добавить определение координат +/-
4. Понять что за объект ++
5. Нагенерить классы животных ++
6. Переопределить методы equals hashcode and toString (частично 1/3) +--
7. Надо понять в какой зависимотти будут наши животные от ENUM

Смотри в класс IslandEntityType и AbstractAnimal, там больше всего изменений

08.11.2023

Сделано:
1. Добавлен метод getEdibleSpecies() в интерфейс IslandEntity
2. Added saturation field in Abstract animal
3. Changed some logic in eating()
4. Refactored Plant.java
5. Added die();


TODO где-то косяк с конструкторами, наверное в ходе тестов вылезет

9.11
Добавила класс координатор для сбора статистики.
Реализовала в нем метод подсчета количества сущностей на поле по типу, можно вывести на экран, НО! сначала прочти до конца.
Установила для каждого животного параметры X и Y, теперь они знают в каком месте поля находятся.
Начала реализовывать многопоточку в классе GameSimulationThread. Для этого вынесла методы eat(), move(), reproduce()
в отдельный пакет (давно напрашивалось). Однако, пока ты не можешь запустить код из-за видимых компилятором ошибок в этих классах.
Поэтому, прежде чем запускать runner, предлагаю тебе удалить пакет Actions и класс GameSimulationThread, запустить код,
налюбоваться на красоту и заново подтянуть из гита актуальную версию проекта.


Добавлен метод countEntitiesInGameField() для подсчета сущностей на всем игровом поле.
Он возвращает мапу, с ней можем сделать что угодно (например, определим параметры окончания игры,
если общее количество хищников стало больше чем травоядных на 50%) или наоборот

НАДО СДЕЛАТЬ:
1. Надо переопределить методы hash и equals чтобы все работало норм
2. Добавить таски на выполнение считывания статистики
3. Добавить такски на действия животных
4. Добавить таску на выращивание растений

Размножается только один, надо чтобы каждый, проверить.

10.11
!Оставила одну абстрактную фабрику, которая генерит все объекты. Почистила классы от ненужных и неиспользуемых полей.
!Добавила класс PlantGenerationThread, который будет отвечать за генерацию растений на поле во время симуляции.
!Переделала сервисы на лямбды, что порядком упростило код, ИМХО. В текстовых файлах сохранила код с циклами, на всякий.
!Добавила интерфейс MoveableReproducibleEatable, без него вообще никак. От него унаследовала наш класс AbstractAnimal
и переопределила методы интерфейса. Весь этот цирк связан с тем, что только животное может перемещаться, размножаться и кушать.
!Завтра (сегодня) планирую уже конкретно сесть за написание многопоточки. То, что лежит в папке Threads годится только для тестов.
!Где ты хотел переопределить методы toString()? Я сделала в абстрактном животном и растении.
